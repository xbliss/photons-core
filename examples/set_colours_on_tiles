#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.actions import an_action

from photons_canvas import Canvas, CanvasColor, Coords
from photons_control.script import FromGenerator
from photons_messages import DeviceMessages

import logging
import random

log = logging.getLogger("info")


@an_action(needs_target=True, special_reference=True)
async def tiles(collector, target, reference, **kwargs):
    """
    Set any tiles we find on the network to specific colors

    You can specify only specific devices by giving a matcher. For example:

    ``tiles d073d5000001,d073d5000002``

    or

    ``tiles match:group_name=kitchen``
    """

    def e(error):
        log.error(error)

    def get_color(x, y):
        return CanvasColor(random.randint(0, 360), 1, 0.2, 3500)

    async def gen(reference, sender, **kwargs):
        plans = sender.make_plans("capability", "chain")
        async for serial, completed, info in sender.gatherer.gather_per_serial(
            plans, reference, **kwargs
        ):
            if not completed:
                continue

            if not info["capability"]["cap"].has_matrix:
                continue

            canvas = Canvas()
            canvas.set_color_func(get_color)

            coords = Coords()
            coords.add_device(serial, info["chain"]["chain"])

            yield DeviceMessages.SetPower(level=65535, target=serial, res_required=False)
            yield canvas.messages_for(coords, duration=2)

    await target.send(FromGenerator(gen), reference, error_catcher=e)


if __name__ == "__main__":
    __import__("photons_core").run("lan:tiles {@:1:}")
